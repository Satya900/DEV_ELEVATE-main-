export const cpp = [
  {
    id: 'cpp-1',
    title: 'Sum of Two Numbers (C++)',
    description: 'Write a function that returns the sum of two numbers.',
    topicId: 'cpp-basics',
    language: 'cpp',
    languageId: 54,
    starterCode: {
      cpp: '#include <iostream>\nusing namespace std;\n\nint sumTwo(int a, int b) {\n // Write your code here\n return 0;\n}\n\nint main() {\n int a, b;\n cin >> a >> b;\n int result = sumTwo(a, b);\n cout << result << endl;\n return 0;\n}',
    },
    difficulty: 'Easy',
    tags: ['math', 'function'],
    acceptanceRate: 88,
    examples: [
      { input: '2 3', output: '5', explanation: '2 + 3 = 5' },
      { input: '10 20', output: '30', explanation: '10 + 20 = 30' },
    ],
    constraints: [{ description: '1 <= a, b <= 1000' }],
    relatedConcepts: ['Addition', 'Functions'],
    hints: [
      { level: 1, content: 'Use the + operator.' },
      { level: 2, content: 'Return the sum of a and b.' },
    ],
    walkthrough: 'To solve this, simply return a + b.',
    commonMistakes: ['Forgetting to return the result.'],
    solutionCode: { cpp: 'int sumTwo(int a, int b) { return a + b; }' },
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '2 3', expectedOutput: '5\n' },
      { input: '10 20', expectedOutput: '30\n' },
    ],
  },
  {
    id: 'cpp-2',
    title: 'Find Maximum of Two Numbers (C++)',
    description: 'Write a function that returns the maximum of two numbers.',
    topicId: 'cpp-basics',
    language: 'cpp',
    languageId: 54,
    starterCode: {
      cpp: '#include <iostream>\nusing namespace std;\n\nint findMax(int a, int b) {\n    // Write your code here\n    return 0;\n}\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    int result = findMax(a, b);\n    cout << result << endl;\n    return 0;\n}',
    },
    difficulty: 'Easy',
    tags: ['conditionals', 'function'],
    acceptanceRate: 90,
    examples: [
      { input: '3 7', output: '7', explanation: 'Maximum of 3 and 7 is 7.' },
      {
        input: '10 5',
        output: '10',
        explanation: 'Maximum of 10 and 5 is 10.',
      },
    ],
    constraints: [{ description: '1 <= a, b <= 1000' }],
    relatedConcepts: ['Conditionals', 'Comparison'],
    hints: [
      { level: 1, content: 'Use an if-else statement to compare a and b.' },
      {
        level: 2,
        content: 'You can also use the max() function from <algorithm>.',
      },
    ],
    walkthrough: 'Compare both numbers and return the larger one.',
    commonMistakes: ['Returning the smaller number by mistake.'],
    solutionCode: {
      cpp: 'int findMax(int a, int b) { return (a > b) ? a : b; }',
    },
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '3 7', expectedOutput: '7\n' },
      { input: '10 5', expectedOutput: '10\n' },
    ],
  },
  {
    id: 'cpp-3',
    title: 'Check Even or Odd (C++)',
    description:
      'Write a function that checks whether a number is even or odd.',
    topicId: 'cpp-basics',
    language: 'cpp',
    languageId: 54,
    starterCode: {
      cpp: '#include <iostream>\nusing namespace std;\n\nstring checkEvenOdd(int n) {\n    // Write your code here\n    return "";\n}\n\nint main() {\n    int n;\n    cin >> n;\n    string result = checkEvenOdd(n);\n    cout << result << endl;\n    return 0;\n}',
    },
    difficulty: 'Easy',
    tags: ['conditionals', 'math'],
    acceptanceRate: 92,
    examples: [
      { input: '4', output: 'Even', explanation: '4 is divisible by 2.' },
      { input: '7', output: 'Odd', explanation: '7 is not divisible by 2.' },
    ],
    constraints: [{ description: '1 <= n <= 10^5' }],
    relatedConcepts: ['Modulo Operation', 'Conditionals'],
    hints: [
      { level: 1, content: 'Use n % 2 to check divisibility.' },
      { level: 2, content: 'If remainder is 0, it’s even; otherwise, odd.' },
    ],
    walkthrough: 'Use the modulo operator to test evenness.',
    commonMistakes: ['Printing boolean instead of a string result.'],
    solutionCode: {
      cpp: 'string checkEvenOdd(int n) { return (n % 2 == 0) ? "Even" : "Odd"; }',
    },
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '4', expectedOutput: 'Even\n' },
      { input: '7', expectedOutput: 'Odd\n' },
    ],
  },
  {
    id: 'cpp-4',
    title: 'Sum of N Natural Numbers (C++)',
    description:
      'Write a function that returns the sum of the first N natural numbers.',
    topicId: 'cpp-basics',
    language: 'cpp',
    languageId: 54,
    starterCode: {
      cpp: '#include <iostream>\nusing namespace std;\n\nint sumNatural(int n) {\n    // Write your code here\n    return 0;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    int result = sumNatural(n);\n    cout << result << endl;\n    return 0;\n}',
    },
    difficulty: 'Easy',
    tags: ['math', 'loops'],
    acceptanceRate: 91,
    examples: [
      { input: '5', output: '15', explanation: '1 + 2 + 3 + 4 + 5 = 15' },
      {
        input: '10',
        output: '55',
        explanation: 'Sum of first 10 numbers = 55',
      },
    ],
    constraints: [{ description: '1 <= n <= 10^5' }],
    relatedConcepts: ['Loops', 'Arithmetic Series'],
    hints: [
      { level: 1, content: 'Use the formula n*(n+1)/2.' },
      { level: 2, content: 'Alternatively, use a loop to sum up.' },
    ],
    walkthrough: 'Apply mathematical formula for sum of N numbers.',
    commonMistakes: ['Integer overflow for large n.'],
    solutionCode: { cpp: 'int sumNatural(int n) { return n * (n + 1) / 2; }' },
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '5', expectedOutput: '15\n' },
      { input: '10', expectedOutput: '55\n' },
    ],
  },
  {
    id: 'cpp-5',
    title: 'Reverse a String (C++)',
    description: 'Write a function that returns the reverse of a given string.',
    topicId: 'cpp-basics',
    language: 'cpp',
    languageId: 54,
    starterCode: {
      cpp: '#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nstring reverseString(string s) {\n    // Write your code here\n    return s;\n}\n\nint main() {\n    string s;\n    getline(cin, s);\n    string result = reverseString(s);\n    cout << result << endl;\n    return 0;\n}',
    },
    difficulty: 'Easy',
    tags: ['string', 'loops'],
    acceptanceRate: 89,
    examples: [
      { input: 'hello', output: 'olleh', explanation: 'Reversing string.' },
      { input: 'cpp', output: 'ppc', explanation: 'Reversing string.' },
    ],
    constraints: [{ description: '1 <= |s| <= 10^4' }],
    relatedConcepts: ['Strings', 'Algorithm'],
    hints: [
      { level: 1, content: 'Use reverse() function from <algorithm>.' },
      { level: 2, content: 'Or swap characters using two pointers.' },
    ],
    walkthrough: 'Simplest solution: use std::reverse().',
    commonMistakes: ['Reversing without printing or missing newline.'],
    solutionCode: {
      cpp: 'string reverseString(string s) { reverse(s.begin(), s.end()); return s; }',
    },
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: 'hello', expectedOutput: 'olleh\n' },
      { input: 'cpp', expectedOutput: 'ppc\n' },
    ],
  },
  {
    id: 'cpp-6',
    title: 'Factorial of a Number (C++)',
    description: 'Write a function that returns the factorial of a number.',
    topicId: 'cpp-basics',
    language: 'cpp',
    languageId: 54,
    starterCode: {
      cpp: '#include <iostream>\nusing namespace std;\n\nlong long factorial(int n) {\n    // Write your code here\n    return 0;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cout << factorial(n) << endl;\n    return 0;\n}',
    },
    difficulty: 'Easy',
    tags: ['loops', 'math'],
    acceptanceRate: 88,
    examples: [
      { input: '5', output: '120', explanation: '5! = 120' },
      { input: '0', output: '1', explanation: '0! = 1 by definition' },
    ],
    constraints: [{ description: '0 <= n <= 20' }],
    relatedConcepts: ['Loops', 'Recursion'],
    hints: [
      { level: 1, content: 'Multiply all numbers from 1 to n.' },
      { level: 2, content: 'Initialize factorial as 1.' },
    ],
    walkthrough: 'Iteratively multiply numbers up to n.',
    commonMistakes: ['Returning 0 instead of 1 for n=0.'],
    solutionCode: {
      cpp: 'long long factorial(int n) { long long fact = 1; for(int i = 1; i <= n; i++) fact *= i; return fact; }',
    },
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '5', expectedOutput: '120\n' },
      { input: '0', expectedOutput: '1\n' },
    ],
  },
  {
    id: 'cpp-7',
    title: 'Check Prime Number (C++)',
    description: 'Write a function to check whether a number is prime or not.',
    topicId: 'cpp-basics',
    language: 'cpp',
    languageId: 54,
    starterCode: {
      cpp: '#include <iostream>\nusing namespace std;\n\nstring isPrime(int n) {\n    // Write your code here\n    return "";\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cout << isPrime(n) << endl;\n    return 0;\n}',
    },
    difficulty: 'Medium',
    tags: ['math', 'loops'],
    acceptanceRate: 85,
    examples: [
      {
        input: '7',
        output: 'Prime',
        explanation: '7 is divisible only by 1 and 7.',
      },
      { input: '9', output: 'Not Prime', explanation: '9 is divisible by 3.' },
    ],
    constraints: [{ description: '2 <= n <= 10^6' }],
    relatedConcepts: ['Optimization', 'Conditionals'],
    hints: [
      { level: 1, content: 'Check divisibility up to √n.' },
      { level: 2, content: 'If divisible, it’s not prime.' },
    ],
    walkthrough: 'Loop from 2 to √n and check divisibility.',
    commonMistakes: ['Checking divisibility till n unnecessarily.'],
    solutionCode: {
      cpp: 'string isPrime(int n) { if(n < 2) return "Not Prime"; for(int i = 2; i * i <= n; i++) if(n % i == 0) return "Not Prime"; return "Prime"; }',
    },
    timeComplexity: 'O(√n)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '7', expectedOutput: 'Prime\n' },
      { input: '9', expectedOutput: 'Not Prime\n' },
    ],
  },
]
