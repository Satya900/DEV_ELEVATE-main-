export const cq = [
  {
    id: 'c-1',
    title: 'Sum of Two Numbers (C)',
    description: 'Write a function that returns the sum of two numbers.',
    topicId: 'c-basics',
    language: 'c',
    languageId: 50,
    starterCode: {
      c: '#include <stdio.h>\n\nint sumTwo(int a, int b) {\n    // Write your code here\n    return 0;\n}\n\nint main() {\n    int a, b;\n    scanf("%d %d", &a, &b);\n    int result = sumTwo(a, b);\n    printf("%d\\n", result);\n    return 0;\n}',
    },
    difficulty: 'Easy',
    tags: ['math', 'function'],
    acceptanceRate: 87,
    examples: [
      { input: '2 3', output: '5', explanation: '2 + 3 = 5' },
      { input: '10 20', output: '30', explanation: '10 + 20 = 30' },
    ],
    constraints: [{ description: '1 <= a, b <= 1000' }],
    relatedConcepts: ['Addition', 'Functions'],
    hints: [
      { level: 1, content: 'Use the + operator.' },
      { level: 2, content: 'Return the sum of a and b.' },
    ],
    walkthrough: 'To solve this, simply return a + b.',
    commonMistakes: ['Forgetting to return the result.'],
    solutionCode: { c: 'int sumTwo(int a, int b) { return a + b; }' },
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '2 3', expectedOutput: '5\\n' },
      { input: '10 20', expectedOutput: '30\\n' },
    ],
  },
  {
    id: 'c-2',
    title: 'Find Maximum of Two Numbers (C)',
    description: 'Write a function that returns the maximum of two integers.',
    topicId: 'c-basics',
    language: 'c',
    languageId: 50,
    starterCode: {
      c: '#include <stdio.h>\n\nint findMax(int a, int b) {\n    // Write your code here\n    return 0;\n}\n\nint main() {\n    int a, b;\n    scanf("%d %d", &a, &b);\n    int result = findMax(a, b);\n    printf("%d\\n", result);\n    return 0;\n}',
    },
    difficulty: 'Easy',
    tags: ['conditionals', 'function'],
    acceptanceRate: 90,
    examples: [
      { input: '3 7', output: '7', explanation: 'Max(3,7)=7' },
      { input: '10 5', output: '10', explanation: 'Max(10,5)=10' },
    ],
    constraints: [{ description: '1 <= a, b <= 1000' }],
    relatedConcepts: ['Conditionals', 'Comparison'],
    hints: [
      { level: 1, content: 'Use if-else to compare.' },
      { level: 2, content: 'Or use the ternary operator.' },
    ],
    walkthrough: 'Compare a and b and return the larger.',
    commonMistakes: ['Mixing up the return values.'],
    solutionCode: {
      c: 'int findMax(int a, int b) { return (a > b) ? a : b; }',
    },
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '3 7', expectedOutput: '7\\n' },
      { input: '10 5', expectedOutput: '10\\n' },
    ],
  },
  {
    id: 'c-3',
    title: 'Check Even or Odd (C)',
    description:
      'Write a function that returns "Even" if n is even, otherwise "Odd".',
    topicId: 'c-basics',
    language: 'c',
    languageId: 50,
    starterCode: {
      c: '#include <stdio.h>\n\nconst char* checkEvenOdd(int n) {\n    // Write your code here\n    return "";\n}\n\nint main() {\n    int n;\n    scanf("%d", &n);\n    printf("%s\\n", checkEvenOdd(n));\n    return 0;\n}',
    },
    difficulty: 'Easy',
    tags: ['conditionals', 'math'],
    acceptanceRate: 92,
    examples: [
      { input: '4', output: 'Even', explanation: '4 % 2 == 0' },
      { input: '7', output: 'Odd', explanation: '7 % 2 != 0' },
    ],
    constraints: [{ description: '1 <= n <= 100000' }],
    relatedConcepts: ['Modulo', 'Branching'],
    hints: [
      { level: 1, content: 'Use n % 2.' },
      { level: 2, content: 'Return corresponding string.' },
    ],
    walkthrough: 'Check parity using modulo.',
    commonMistakes: ['Returning boolean instead of string.'],
    solutionCode: {
      c: 'const char* checkEvenOdd(int n) { return (n % 2 == 0) ? "Even" : "Odd"; }',
    },
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '4', expectedOutput: 'Even\\n' },
      { input: '7', expectedOutput: 'Odd\\n' },
    ],
  },
  {
    id: 'c-4',
    title: 'Sum of N Natural Numbers (C)',
    description:
      'Write a function that returns the sum of the first N natural numbers.',
    topicId: 'c-math',
    language: 'c',
    languageId: 50,
    starterCode: {
      c: '#include <stdio.h>\n\nlong long sumNatural(int n) {\n    // Write your code here\n    return 0;\n}\n\nint main() {\n    int n;\n    scanf("%d", &n);\n    long long result = sumNatural(n);\n    printf("%lld\\n", result);\n    return 0;\n}',
    },
    difficulty: 'Easy',
    tags: ['math', 'formula'],
    acceptanceRate: 91,
    examples: [
      { input: '5', output: '15', explanation: '1+2+3+4+5=15' },
      {
        input: '10',
        output: '55',
        explanation: 'Sum of first 10 natural numbers',
      },
    ],
    constraints: [{ description: '1 <= n <= 1000000' }],
    relatedConcepts: ['Arithmetic Progression', 'Overflow'],
    hints: [
      { level: 1, content: 'Use n*(n+1)/2.' },
      { level: 2, content: 'Use long long for safety.' },
    ],
    walkthrough: 'Apply the formula directly.',
    commonMistakes: ['Integer overflow when using int.'],
    solutionCode: {
      c: 'long long sumNatural(int n) { return (long long)n * (n + 1) / 2; }',
    },
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '5', expectedOutput: '15\\n' },
      { input: '10', expectedOutput: '55\\n' },
    ],
  },
  {
    id: 'c-5',
    title: 'Reverse a String (C)',
    description: 'Write a function that returns the reverse of a given string.',
    topicId: 'c-strings',
    language: 'c',
    languageId: 50,
    starterCode: {
      c: '#include <stdio.h>\n#include <string.h>\n\nchar* reverseString(char* s) {\n    // Write your code here\n    return s;\n}\n\nint main() {\n    char s[101];\n    scanf("%100s", s);\n    printf("%s\\n", reverseString(s));\n    return 0;\n}',
    },
    difficulty: 'Easy',
    tags: ['string', 'two-pointers'],
    acceptanceRate: 89,
    examples: [
      {
        input: 'hello',
        output: 'olleh',
        explanation: 'Reverse the characters.',
      },
      { input: 'cpp', output: 'ppc', explanation: 'Reverse the characters.' },
    ],
    constraints: [{ description: '1 <= len(s) <= 100' }],
    relatedConcepts: ['Pointers', 'In-place Mutation'],
    hints: [
      { level: 1, content: 'Use two indices: start and end.' },
      { level: 2, content: 'Swap characters until they cross.' },
    ],
    walkthrough: 'Swap s[l] and s[r] while l<r.',
    commonMistakes: ['Forgetting the null terminator is already handled.'],
    solutionCode: {
      c: 'char* reverseString(char* s) { int l=0, r=(int)strlen(s)-1; while(l<r){ char tmp=s[l]; s[l]=s[r]; s[r]=tmp; l++; r--; } return s; }',
    },
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: 'hello', expectedOutput: 'olleh\\n' },
      { input: 'cpp', expectedOutput: 'ppc\\n' },
    ],
  },
  {
    id: 'c-6',
    title: 'Factorial of a Number (C)',
    description: 'Write a function that returns n! for a given n.',
    topicId: 'c-math',
    language: 'c',
    languageId: 50,
    starterCode: {
      c: '#include <stdio.h>\n\nunsigned long long factorial(int n) {\n    // Write your code here\n    return 0ULL;\n}\n\nint main() {\n    int n;\n    scanf("%d", &n);\n    printf("%llu\\n", factorial(n));\n    return 0;\n}',
    },
    difficulty: 'Easy',
    tags: ['loops', 'math'],
    acceptanceRate: 88,
    examples: [
      { input: '5', output: '120', explanation: '5! = 120' },
      { input: '0', output: '1', explanation: '0! = 1' },
    ],
    constraints: [{ description: '0 <= n <= 20' }],
    relatedConcepts: ['Loops', 'Overflow'],
    hints: [
      { level: 1, content: 'Iterate from 1 to n multiplying.' },
      { level: 2, content: 'Start with 1 as the accumulator.' },
    ],
    walkthrough: 'Multiply in a loop; handle n=0.',
    commonMistakes: ['Returning 0 for n=0.'],
    solutionCode: {
      c: 'unsigned long long factorial(int n) { unsigned long long f=1; for(int i=1;i<=n;i++) f*=i; return f; }',
    },
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '5', expectedOutput: '120\\n' },
      { input: '0', expectedOutput: '1\\n' },
    ],
  },
  {
    id: 'c-7',
    title: 'Check Prime Number (C)',
    description:
      'Write a function that returns "Prime" if n is prime, else "Not Prime".',
    topicId: 'c-math',
    language: 'c',
    languageId: 50,
    starterCode: {
      c: '#include <stdio.h>\n#include <math.h>\n\nconst char* isPrime(int n) {\n    // Write your code here\n    return "";\n}\n\nint main() {\n    int n;\n    scanf("%d", &n);\n    printf("%s\\n", isPrime(n));\n    return 0;\n}',
    },
    difficulty: 'Medium',
    tags: ['math', 'optimization'],
    acceptanceRate: 85,
    examples: [
      {
        input: '7',
        output: 'Prime',
        explanation: '7 has no divisors other than 1 and 7.',
      },
      { input: '9', output: 'Not Prime', explanation: '9 is divisible by 3.' },
    ],
    constraints: [{ description: '2 <= n <= 1000000' }],
    relatedConcepts: ['Square Root Optimization', 'Conditionals'],
    hints: [
      { level: 1, content: 'Check divisibility up to √n.' },
      { level: 2, content: 'Return early when a divisor is found.' },
    ],
    walkthrough: 'Loop i=2..√n and test n%i==0.',
    commonMistakes: ['Checking till n instead of √n.'],
    solutionCode: {
      c: 'const char* isPrime(int n) { if(n<2) return "Not Prime"; for(int i=2; i*i<=n; i++){ if(n%i==0) return "Not Prime"; } return "Prime"; }',
    },
    timeComplexity: 'O(√n)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '7', expectedOutput: 'Prime\\n' },
      { input: '9', expectedOutput: 'Not Prime\\n' },
    ],
  },
  {
    id: 'c-8',
    title: 'Find Largest Element in Array (C)',
    description: 'Given an array of integers, return the largest element.',
    topicId: 'c-arrays',
    language: 'c',
    languageId: 50,
    starterCode: {
      c: '#include <stdio.h>\n\nint arrayMax(const int* arr, int n) {\n    // Write your code here\n    return 0;\n}\n\nint main() {\n    int n; scanf("%d", &n);\n    int a[100005];\n    for(int i=0;i<n;i++) scanf("%d", &a[i]);\n    printf("%d\\n", arrayMax(a, n));\n    return 0;\n}',
    },
    difficulty: 'Easy',
    tags: ['arrays', 'loops'],
    acceptanceRate: 90,
    examples: [
      { input: '5\n1 2 3 4 5', output: '5', explanation: 'Max is 5.' },
      { input: '4\n-3 -1 -7 -2', output: '-1', explanation: 'Max is -1.' },
    ],
    constraints: [{ description: '1 <= n <= 100000; -1e9 <= ai <= 1e9' }],
    relatedConcepts: ['Scanning', 'Initialization'],
    hints: [
      { level: 1, content: 'Initialize max with first element.' },
      { level: 2, content: 'Update max while iterating.' },
    ],
    walkthrough: 'Keep a running maximum through the loop.',
    commonMistakes: ['Initializing max to 0 (fails for all negative arrays).'],
    solutionCode: {
      c: 'int arrayMax(const int* arr, int n) { int m = arr[0]; for(int i=1;i<n;i++) if(arr[i]>m) m=arr[i]; return m; }',
    },
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '5\n1 2 3 4 5', expectedOutput: '5\\n' },
      { input: '4\n-3 -1 -7 -2', expectedOutput: '-1\\n' },
    ],
  },
]
