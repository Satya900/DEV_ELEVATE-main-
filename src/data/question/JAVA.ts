export const javaQuestion = [
  {
    id: 'java-1',
    title: 'Sum of Two Numbers (Java)',
    description: 'Write a method that returns the sum of two numbers.',
    topicId: 'java-basics',
    language: 'java',
    languageId: 62,
    starterCode: {
      java: 'import java.util.Scanner;\n\npublic class Main {\n    public static int sumTwo(int a, int b) {\n        // Write your code here\n        return 0;\n    }\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n        int result = sumTwo(a, b);\n        System.out.println(result);\n        scanner.close();\n    }\n}',
    },
    difficulty: 'Easy',
    tags: ['math', 'function'],
    acceptanceRate: 88,
    examples: [
      { input: '2 3', output: '5', explanation: '2 + 3 = 5' },
      { input: '10 20', output: '30', explanation: '10 + 20 = 30' },
    ],
    constraints: [{ description: '1 <= a, b <= 1000' }],
    relatedConcepts: ['Addition', 'Methods'],
    hints: [
      { level: 1, content: 'Use the + operator.' },
      { level: 2, content: 'Return the sum of a and b.' },
    ],
    walkthrough: 'To solve this, simply return a + b.',
    commonMistakes: ['Forgetting to return the result.'],
    solutionCode: {
      java: 'public static int sumTwo(int a, int b) { return a + b; }',
    },
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '2 3', expectedOutput: '5\n' },
      { input: '10 20', expectedOutput: '30\n' },
    ],
  },

  {
    id: 'java-2',
    title: 'Find Maximum of Two Numbers (Java)',
    description: 'Write a method that returns the maximum of two numbers.',
    topicId: 'java-basics',
    language: 'java',
    languageId: 62,
    starterCode: {
      java: 'import java.util.Scanner;\n\npublic class Main {\n    public static int findMax(int a, int b) {\n        // Write your code here\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int a = scanner.nextInt();\n        int b = scanner.nextInt();\n        int result = findMax(a, b);\n        System.out.println(result);\n        scanner.close();\n    }\n}',
    },
    difficulty: 'Easy',
    tags: ['conditionals', 'function'],
    acceptanceRate: 90,
    examples: [
      { input: '3 7', output: '7', explanation: 'Maximum of 3 and 7 is 7.' },
      {
        input: '10 5',
        output: '10',
        explanation: 'Maximum of 10 and 5 is 10.',
      },
    ],
    constraints: [{ description: '1 <= a, b <= 1000' }],
    relatedConcepts: ['Conditionals', 'Comparison'],
    hints: [
      { level: 1, content: 'Use an if-else statement to compare a and b.' },
      { level: 2, content: 'You can also use Math.max(a, b).' },
    ],
    walkthrough: 'Compare both numbers and return the larger one.',
    commonMistakes: ['Returning the smaller number by mistake.'],
    solutionCode: {
      java: 'public static int findMax(int a, int b) { return Math.max(a, b); }',
    },
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '3 7', expectedOutput: '7\n' },
      { input: '10 5', expectedOutput: '10\n' },
    ],
  },
  {
    id: 'java-3',
    title: 'Check Even or Odd (Java)',
    description: 'Write a method that checks whether a number is even or odd.',
    topicId: 'java-basics',
    language: 'java',
    languageId: 62,
    starterCode: {
      java: 'import java.util.Scanner;\n\npublic class Main {\n    public static String checkEvenOdd(int n) {\n        // Write your code here\n        return "";\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        String result = checkEvenOdd(n);\n        System.out.println(result);\n        scanner.close();\n    }\n}',
    },
    difficulty: 'Easy',
    tags: ['conditionals', 'math'],
    acceptanceRate: 92,
    examples: [
      { input: '4', output: 'Even', explanation: '4 is divisible by 2.' },
      { input: '7', output: 'Odd', explanation: '7 is not divisible by 2.' },
    ],
    constraints: [{ description: '1 <= n <= 10^5' }],
    relatedConcepts: ['Modulo Operation', 'Conditionals'],
    hints: [
      { level: 1, content: 'Use n % 2 to check divisibility.' },
      { level: 2, content: 'If remainder is 0, it’s even; otherwise, odd.' },
    ],
    walkthrough: 'Use the modulo operator to test evenness.',
    commonMistakes: [
      'Forgetting to print a string output like "Even" or "Odd".',
    ],
    solutionCode: {
      java: 'public static String checkEvenOdd(int n) { return (n % 2 == 0) ? "Even" : "Odd"; }',
    },
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '4', expectedOutput: 'Even\n' },
      { input: '7', expectedOutput: 'Odd\n' },
    ],
  },
  {
    id: 'java-4',
    title: 'Sum of N Natural Numbers (Java)',
    description:
      'Write a method that returns the sum of the first N natural numbers.',
    topicId: 'java-basics',
    language: 'java',
    languageId: 62,
    starterCode: {
      java: 'import java.util.Scanner;\n\npublic class Main {\n    public static int sumNatural(int n) {\n        // Write your code here\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int result = sumNatural(n);\n        System.out.println(result);\n        scanner.close();\n    }\n}',
    },
    difficulty: 'Easy',
    tags: ['math', 'loops'],
    acceptanceRate: 91,
    examples: [
      { input: '5', output: '15', explanation: '1 + 2 + 3 + 4 + 5 = 15' },
      {
        input: '10',
        output: '55',
        explanation: 'Sum of first 10 numbers = 55',
      },
    ],
    constraints: [{ description: '1 <= n <= 10^5' }],
    relatedConcepts: ['Loops', 'Arithmetic Series'],
    hints: [
      { level: 1, content: 'Use the formula n*(n+1)/2.' },
      { level: 2, content: 'You can also use a for loop to sum numbers.' },
    ],
    walkthrough: 'Apply the mathematical formula for summing natural numbers.',
    commonMistakes: ['Integer overflow for large n (use long if needed).'],
    solutionCode: {
      java: 'public static int sumNatural(int n) { return n * (n + 1) / 2; }',
    },
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '5', expectedOutput: '15\n' },
      { input: '10', expectedOutput: '55\n' },
    ],
  },
  {
    id: 'java-5',
    title: 'Reverse a String (Java)',
    description: 'Write a method that returns the reverse of a string.',
    topicId: 'java-basics',
    language: 'java',
    languageId: 62,
    starterCode: {
      java: 'import java.util.Scanner;\n\npublic class Main {\n    public static String reverseString(String s) {\n        // Write your code here\n        return "";\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String s = scanner.nextLine();\n        String result = reverseString(s);\n        System.out.println(result);\n        scanner.close();\n    }\n}',
    },
    difficulty: 'Easy',
    tags: ['string', 'loops'],
    acceptanceRate: 89,
    examples: [
      { input: 'hello', output: 'olleh', explanation: 'Reversing the string.' },
      { input: 'java', output: 'avaj', explanation: 'Reversing the string.' },
    ],
    constraints: [{ description: '1 <= |s| <= 10^4' }],
    relatedConcepts: ['StringBuilder', 'Reverse'],
    hints: [
      { level: 1, content: 'Use StringBuilder’s reverse() method.' },
      {
        level: 2,
        content: 'Or loop from end to start to build reversed string.',
      },
    ],
    walkthrough: 'Easiest way: use StringBuilder reverse().',
    commonMistakes: ['Trying to modify strings directly (they’re immutable).'],
    solutionCode: {
      java: 'public static String reverseString(String s) { return new StringBuilder(s).reverse().toString(); }',
    },
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(n)',
    testCases: [
      { input: 'hello', expectedOutput: 'olleh\n' },
      { input: 'java', expectedOutput: 'avaj\n' },
    ],
  },
  {
    id: 'java-6',
    title: 'Factorial of a Number (Java)',
    description: 'Write a method that returns the factorial of a number.',
    topicId: 'java-basics',
    language: 'java',
    languageId: 62,
    starterCode: {
      java: 'import java.util.Scanner;\n\npublic class Main {\n    public static long factorial(int n) {\n        // Write your code here\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        long result = factorial(n);\n        System.out.println(result);\n        scanner.close();\n    }\n}',
    },
    difficulty: 'Easy',
    tags: ['loops', 'math'],
    acceptanceRate: 88,
    examples: [
      { input: '5', output: '120', explanation: '5! = 120' },
      { input: '0', output: '1', explanation: '0! = 1 by definition' },
    ],
    constraints: [{ description: '0 <= n <= 20' }],
    relatedConcepts: ['Loops', 'Recursion'],
    hints: [
      { level: 1, content: 'Multiply all numbers from 1 to n.' },
      { level: 2, content: 'Use 1 as the initial factorial value.' },
    ],
    walkthrough: 'Iterate from 1 to n multiplying each number.',
    commonMistakes: ['Returning 0 instead of 1 for n=0.'],
    solutionCode: {
      java: 'public static long factorial(int n) { long fact = 1; for (int i = 1; i <= n; i++) fact *= i; return fact; }',
    },
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '5', expectedOutput: '120\n' },
      { input: '0', expectedOutput: '1\n' },
    ],
  },
  {
    id: 'java-7',
    title: 'Check Prime Number (Java)',
    description: 'Write a method to check if a number is prime.',
    topicId: 'java-basics',
    language: 'java',
    languageId: 62,
    starterCode: {
      java: 'import java.util.Scanner;\n\npublic class Main {\n    public static String isPrime(int n) {\n        // Write your code here\n        return "";\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        String result = isPrime(n);\n        System.out.println(result);\n        scanner.close();\n    }\n}',
    },
    difficulty: 'Medium',
    tags: ['math', 'loops'],
    acceptanceRate: 85,
    examples: [
      {
        input: '7',
        output: 'Prime',
        explanation: '7 has no divisors other than 1 and 7.',
      },
      { input: '9', output: 'Not Prime', explanation: '9 is divisible by 3.' },
    ],
    constraints: [{ description: '2 <= n <= 10^6' }],
    relatedConcepts: ['Conditionals', 'Optimization'],
    hints: [
      { level: 1, content: 'Check divisibility up to √n.' },
      { level: 2, content: 'If divisible, it’s not prime.' },
    ],
    walkthrough: 'Loop i from 2 to √n; return false if divisible.',
    commonMistakes: ['Looping all the way to n instead of √n.'],
    solutionCode: {
      java: 'public static String isPrime(int n) { if (n < 2) return "Not Prime"; for (int i = 2; i * i <= n; i++) if (n % i == 0) return "Not Prime"; return "Prime"; }',
    },
    timeComplexity: 'O(√n)',
    spaceComplexity: 'O(1)',
    testCases: [
      { input: '7', expectedOutput: 'Prime\n' },
      { input: '9', expectedOutput: 'Not Prime\n' },
    ],
  },
]
